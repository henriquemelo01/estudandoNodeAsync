// P/ executar o node utiliza-se node stats.js

/*  Request response model 
   Client faz uma requisiÃ§Ã£o de maneira assincrona, ou seja, solicita (get) ou envia (post) algum dado a um web server que normalmente contem uma API. O web server ira retornar uma resposta contendo o dado ou uma pÃ¡gina web solicitada.

   EndereÃ§o: https://wwww.restcountries.eu/rest/v2/alpha/PT
   -https: Protoculo utilizado no processo de request response
   -www.restcountries.eu : Dominio 
   -/rest,/v2,/alpha e /PT : SÃ£o denominados recursos, identifica os dados desejados.  
   
   O dominio nÃ£o Ã© o endereÃ§o real de uma pÃ¡gina web e sim o ip, o servidor responsÃ¡vel pelo processo de conversÃ£o do endereÃ§o de dominio para o endereÃ§o IP Ã© o DNS (DOMAIN NAME SERVER) que funcionam como uma lista telefonica. 

   Quando acessamos um pÃ¡gina web o browser faz uma requisiÃ§Ã£o para o DNS e o servidor irÃ¡ parear o endereÃ§o de dominio com o enderÃ§o de ip isso ocorre no servidor do provedor de internet. ApÃ³s o endereÃ§o IP ser enviado ao browser pelo DNS serÃ¡ feita uma chamada por este endereÃ§o ip

   EndereÃ§o ip: https://104.27.142.889:443 , onde: https - protocolo, 104.27.142.889 - ip, 443 - porta que sera acessado no servido que identifica um serviÃ§o especifico que esta rodando no servidor.  

   AlÃ©m disso, serÃ¡ feita uma conexÃ£o entre o web server e o client que ficara ativa durante toda transferÃªncia de dado. Esta comunicaÃ§Ã£o Ã© definida pelo protocolo TCP/IP que Ã© responsÃ¡vel por "ditar" como o dado trafega pela web.
   
   Como funciona o TCP/IP?

    O TCP serÃ¡ responsÃ¡vel por quebra as requisiÃ§Ãµes em pequenos chunks (blocos) chamados de pacotes antes de serem envidas, facilitando assim o "trafego" da requisiÃ§Ã£o. Uma vez que estes pacotes chegaram atÃ© o destino final o TCP remontam todas eles para o formato original da requisiÃ§Ã£o ou resposta.
    O papel do protocolo ip Ã© definir as rotas a partir do endereÃ§o ip onde foi solicitada a requisiÃ§Ã£o destes pacotes e os envia.
   
   Em seguida, o client faz uma requisiÃ§Ã£o ao web server que segue o protocolo http. Toda requisiÃ§Ã£o tem o formato seguinte:

   Link: http://prntscr.com/1110jci

   Quando a requisiÃ§Ã£o chega no servidor, este ira acessa os dados  em um banco de dados ou um JSON vindo de uma API ou o html de uma pÃ¡gina que queremos acessar e quando estes estiverem "prontos", o servidor efetua uma HTTP response que tem o seguinte formado  

   Link: http://prntscr.com/1110nas

   Imagem de todo processo: Link: http://prntscr.com/1110wur


*/

// API : Application Programming Interface: Ã‰ um pedaÃ§o de progrma que pode ser usado por outro pedaÃ§o de programa, em ordem de basicamente permitir que aplicaÃ§Ãµes se comunicarem entre si e trocam informaÃ§Ãµes (dados) por meio da especificicaÃ§Ã£o e regras.
// Online API: Ã© uma aplicaÃ§Ã£o que esta rodando em um servidor que recebe requisiÃ§Ãµes do client (solicitaÃ§Ã£o de um dado) e em seguida obtem os dados solicitados em um DB e o retorna ao client. Hoje em dia, na maioria dos casos, estes dados sÃ£o retornados na forma de um JSON:
/* JSON FORMAT
 {
   "publisher": "101 Cookbooks",
   "title": "Best Pizza Dough Ever",
   "recipe_id" : "477466",
   "sociial_rank" : 100
 }

 Quando trabalhamos com uma API todas as requisiÃ§Ãµes precisam ter uma identificaÃ§Ã£o, estas sÃ£o denomidas rotas (/produtos/mouse). Toda rota devera ter um recurso, este Ã© o que define a rota (produtos). O servidor identifica a rota solicitada pelo client, acessa sua regra de negocio. A troca entre as requests e responses definem a API.

 Quando executamos uma aplicaÃ§Ã£o em um sistema operacional, estas sÃ£o carregadas na memoria, e viram um processo. O processo Ã© um conjunto de instruÃ§Ãµes, dados e estados (dormindo, rodando, parado)
 Thread: Ã‰ a capacidade de um processador processar diversas instruÃ§Ãµes simultaneamente, um pedaÃ§o de um processo capaz de executar determinada tarefa 
*/

/* Promisses: Ã‰ um objeto que irÃ¡ conter o resultado de uma operaÃ§Ã£o assincrona, quando esta foi bem sucedida dizemos que a promisse foi preenchida (fullfiled).
Ex: Quando compramos um bilhete de loteria tem-se a promessa que vamos receber o dinheiro se acertarmos os valores da loteria, ou seja, essa promessa pode ser bem sucedidada (fullfilled) ou nÃ£o (error). A loteria ocorre de maneira assincrona, nÃ£o precisamos parar nossa "vida" atÃ© o fim da loteria. 

Ciclo de uma vida de uma promisse:
1) Pending
2) Settled: Estado em que a operaÃ§Ã£o assincrona Ã© finalizada
   Fullfilled : A operaÃ§Ã£o assincrona foi bem sucedida e a promisse foi preenchida com um valor esperada.
   Rejected: Houve um erro na operaÃ§Ã£o assincrona e a promisse nÃ£o foi preenchida corretamente. 


// Consumindo dados de uma API usando a Fetch API:

O metodo fetch executa uma requisiÃ§Ã£o do tipo get a um Web Server que, normalmente, contem uma API. 

Ao utilizarmos a funÃ§Ã£o fetch da Fetch Api, para fazermos a requisiÃ§Ã£o de um dado vindo atravÃ©s de uma API, esta cria uma promisse, que irÃ¡ armazenar a resposta vinda de uma API. A promisse contÃ©m o metodo then, este metodo Ã© executado quando a promisse for preenchida (fullfiled), para acessarmos o body da resposta, ou seja, os dados retornados pela API no formato de JSON, utiliza-se o metodo json().

OBS: o metodo then sempre retorna uma promisse, se retornarmos um valor no then este serÃ¡ o valor preenchido na promisse (fullfilled value).

// Identificando erros na requisiÃ§Ã£o:
Podemos identificar erros na operaÃ§Ã£o assincrona (requisiÃ§Ã£o) usando o metodo then, uma vez que o segundo parÃ¢metro do metodo Ã© uma callback que Ã© executada em caso a promisse nÃ£o seja preenchida 

      .then(callbackPromiseWasFullfilled, callbackPromiseWasRejected)

A callback promiseWasRejected recebe como parÃ¢metro o erro. Por padrÃ£o, a callback identifica apenas o erro devido a perda de conexÃ£o do client, entretanto, pode-se identificar outros tipos de erros como o 404 que indica "page not found";

Uma outra forma de "identificarmos" erros em operaÃ§Ãµes assincronas Ã© utilizando o metodo catch. Este dispara uma callback toda vez que uma promisse for rejeitada, assim em uma cadeia de promisses, o metodo Ã© disparado toda vez que ocorrer um erro independente do local onde ocorreu o mesmo, ou seja, no meio, no final, no inicio da cadeia de promisses. Assim como a segunda callback do then, o catch recebe como parÃ¢metro o objeto error.

A linha de cÃ³digo, throw new error(msgDeErro), faz um retorno em caso de erro, ou seja, sai do escopo onde foi declarada, rejeitando a operaÃ§Ã£o e o parÃ¢metro msgDeErro Ã© armazenado na propriedade message do objeto error que foi "instanciado". AlÃ©m disso todo erro declarado atravÃ©s deste cÃ³digo propaga atÃ© o metodo catch() visto anteriormente 

O metodo finally sempre dispara sua callback, independente se houve erro na operaÃ§Ã£o assincrona ou se a promise foi preenchida. Isso normalmente, Ã© utilizado nos componentes de loading. 

OBS: Quando ocorre um 404 (page not found) a promise Ã© preenchida, ou seja, para a promise nÃ£o houve um rejeiÃ§Ã£o. Assim, serÃ¡ necessÃ¡rio tratar tal comportamento. O retorno desta promisse contem a propriedade ok, em caso do erro 404, o estado desta propriedade Ã© false, dessa forma, se estado de ok for falso "criamos" um novo erro, usando throw new error.


*/

// Consumindo Promisses -> Acessando dados de uma API -> Rest Countries API

const btnWhereAmI = document.querySelector(".btnWhereAmI");
btnWhereAmI.addEventListener("click", function () {
  getCountryData("brazil");
  errSpan.textContent = "";
});

const errSpan = document.querySelector(".errMsg");

const getCountryData = function (countryName) {
  // Fetch => http request.get(), retorna uma promisse
  const request = fetch(`https://restcountries.eu/rest/v2/name/${countryName}`);
  request
    .then((response) => {
      // O response Ã© o valor que foi preenchido na promisse que foi retornada da funÃ§Ã£o fetch. Como o fetch() efetua uma requisiÃ§Ã£o do tipo Get a um web server que contÃ©m uma API, denominamos tal parÃ¢metro como response

      // Ã‰ um metodo do objeto response que permite acessar o body da response -> parse

      // ou response.status === 404
      if (!response.ok)
        throw new Error(`Country not found (${response.status})`);

      return response.json();
    })
    .then((data) => {
      const [countryData] = data;
      console.log(countryData);
      const [neighbour] = countryData.borders;

      if (!neighbour) return;

      // Neighbour Data
      return fetch(`https://restcountries.eu/rest/v2/name/${neighbour}`);
    })
    .then((res) => res.json())
    .then((data) => {
      const [neighbourData] = data;
      console.log(neighbourData);
    })
    .catch((error) => {
      errSpan.textContent = `Something went wrong: ${error.message} ðŸ’£ðŸ’£`;
      console.dir(error);
      throw new Error(`Falha na requisiÃ§Ã£o: ${error} ðŸ’£ðŸ’£`);
    });
};

// Node

// Require -> Importando modulos no Node
const os = require("os");
const logger = require("log");

setInterval(() => {
  const { freemem, totalmem } = os;

  const total = Math.trunc(totalmem() / 1024 / 1024);
  const mem = Math.trunc(freemem() / 1024 / 1024);
  const percentageMem = Math.trunc((mem * 100) / total);

  const stats = {
    freeMemory: `${mem} MB`,
    totalMemory: `${totalmem} MB`,
    usagePercentage: `${percentageMem}%`,
  };

  console.clear();
  console.log("======= PC STATUS =======");
  console.table(stats);
}, 1000);

window.prompt();
logger(window.prompt("Bem vindo usuario !!"));
console.log("Teste");
